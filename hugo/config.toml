baseURL = "http://food-pairing.tfrere.com/"
defaultContentLanguage = 'en'
languageCode = "en-us"
title = "RECIPES"
sectionPagesMenu = "main"
buildFuture = false
staticDir = ["static"]
extensions = [
  "laxHtmlBlocks", # laxer block handling... let's see what this does?
  "hardLineBreak", # newlines result in line breaks
]
timeout = 600000

disableKinds = ["sitemap"]

[outputs]
    home = ["HTML"]
    page = ["json"]
    section = ["json"]

[outputFormats.ingredients]
    baseName = "ingredients"
    mediatype ="application/json"

[markup.goldmark.renderer]
  hardWraps = true
 
# Highest width is 2500px for landscape and 1500px for portrait.
# This will give both orientations roughly the same resolution and size.
# Every landscape image will also be scaled down to 1500px and 1000px,
# and portrait photos to 1000px and 750px wide.
[params]
  landscapePhotoWidths = [2000, 1500, 1000, 500]
  portraitPhotoWidths = [1500, 1250, 750, 350]

[imaging]
  quality = 70

[build]   
  publishResources = false


[deployment]
# By default, files are uploaded in an arbitrary order.
# Files that match the regular expressions in the "Order" list
# will be uploaded first, in the listed order.
order = [".jpg$", ".gif$"]


[[deployment.targets]]
# An arbitrary name for this target.
name = "mydeployment"
# The Go Cloud Development Kit URL to deploy to. Examples:
# GCS; see https://gocloud.dev/howto/blob/#gcs
URL = "gs://food-pairing.tfrere.com"

# S3; see https://gocloud.dev/howto/blob/#s3
# For S3-compatible endpoints, see https://gocloud.dev/howto/blob/#s3-compatible
# URL = "s3://<Bucket Name>?region=<AWS region>"

# Azure Blob Storage; see https://gocloud.dev/howto/blob/#azure
# URL = "azblob://$web"

# You can use a "prefix=" query parameter to target a subfolder of the bucket:
# URL = "gs://<Bucket Name>?prefix=a/subfolder/"

# If you are using a CloudFront CDN, deploy will invalidate the cache as needed.
# cloudFrontDistributionID = <ID>

# Optionally, you can include or exclude specific files.
# See https://godoc.org/github.com/gobwas/glob#Glob for the glob pattern syntax.
# If non-empty, the pattern is matched against the local path.
# All paths are matched against in their filepath.ToSlash form.
# If exclude is non-empty, and a local or remote file's path matches it, that file is not synced.
# If include is non-empty, and a local or remote file's path does not match it, that file is not synced.
# As a result, local files that don't pass the include/exclude filters are not uploaded to remote,
# and remote files that don't pass the include/exclude filters are not deleted.
# include = "**.html" # would only include files with ".html" suffix
# exclude = "**.{jpg, png}" # would exclude files with ".jpg" or ".png" suffix


# [[deployment.matchers]] configure behavior for files that match the Pattern.
# See https://golang.org/pkg/regexp/syntax/ for pattern syntax.
# Pattern searching is stopped on first match.

# Samples:

[[deployment.matchers]]
# Cache static assets for 1 year.
pattern = "^.+\\.(js|css|svg|ttf)$"
cacheControl = "max-age=31536000, no-transform, public"
gzip = true

[[deployment.matchers]]
pattern = "^.+\\.(png|jpg|svg)$"
cacheControl = "max-age=31536000, no-transform, public"
gzip = false

[[deployment.matchers]]
# Set custom content type for /sitemap.xml
pattern = "^sitemap\\.xml$"
contentType = "application/xml"
gzip = true

[[deployment.matchers]]
pattern = "^.+\\.(html|xml|json)$"
gzip = true